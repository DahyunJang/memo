* tips and tricks
** mutex_lock 이 블락 안에서만 유효하도록 짜놓음
** override 표현은 override하는 함수의 base가 virtual 함수임을 확인한다.
** using ServableName = string;
  using Version = int64;
  using VersionMap =
      std::map<Version, ServableStateAndTime, std::greater<Version>>;
  using ServableMap = std::map<ServableName, VersionMap>;
** cpp 에서 스트럭트와 클래스의 차이는 디폴트가 퍼블릭이냐 프라이빗이냐 뿐임.
** 스트럭트에 컨스트럭터도 있을 수 있음
** mutable variable -> can be changed in const function
** decltype -> 정의된 타입 반환
** map 에서 first 가 인덱스고 second가 데이터
**  static auto* registry = new Registry(); -> static 이어서 한 번만.
** 로그를 적는 각종 팩토리들을 등록하게 되어있음.

** 유니폼 샘플러
// A sampler which samples uniformly at random.
  class UniformSampler {
   public:
    UniformSampler() : rd_(), gen_(rd_()), dist_(0, 1) {}

    // Returns true if the sampler decides to sample it with a probability
    // 'rate'.
    bool Sample(const double rate) { return dist_(gen_) < rate; }

   private:
    std::random_device rd_;
    std::mt19937 gen_;
    std::uniform_real_distribution<double> dist_;
  };

- std::mt19937 -> 메르센 트위스터라고 하는 난수 생성기임
- 시드로 std::random_device 사용
- std::uniform_real_dist -> 주어진 범위 내 유니폼 float 생성

** move를 쓸때는 refer가 아니라 포인터 사용.
** 람다 리턴
람다를 리턴하고 있는데, 아마 리턴 타입 Status는 캐스팅 되는 것 같고..

Status Retry(const string& description, const uint32 max_num_retries,
             const int64 retry_interval_micros,
             const std::function<Status()>& retried_fn,
             const std::function<bool()>& is_cancelled) {
  return [&]() {
    Status status;
    // do something
    return status;
  }();
}
-> stackoverflow에 질문 올려놓음.
** GAURDED_BY

* word-dict
- oblivious : 의식하지 못하는
- harness : 벨트, 긴밀히 협조하는
- delegate : 위임하다. 대표

* util
** any_ptr
- type-safe void* 같은 것인데, 콜러가 잘못 사용한다면 null로 나타나게.
- ptr을 받아서 (ptr.get<string>!=nullptr) 이런 식으로..
- 지나치게 긴 타입 체크 문은 패턴적으로 좋지 않음.
- 내부에 type, const를 제거해서 포인터를 들고오고, get시 원래 타입으로 캐스팅
- ptr_(const_cast<void*>(reinterpret_cast<const void*>(ptr))) {}
- reinterpret 캐스트는 c에서 생각하는 형변환이랑 비슷함.
- typename T로 시작하는 블록 안에서 static int dummy 에 대한 주소를 반환 -> 타입에 대한 아이디로 사용 (쩐당...)
** unique_ptr_with_deps
- private에 std::vector<UniqueAnyPtr> deleters_, T* object 들고 있음.
- destruction 시 디펜던시가 있는 것까지 다 지운다.
- setOwned -> unique 로 포인터를 내부 오브젝트에 세팅해버림.
- depency 의 경우엔 get으로 넣어 deleters에 넣어 둠. -> 유니크 포인터로 들고온다.
- 디스럽터에서 deleters_ 안에서 pop_back 한다 (쩐당..) -> 블록 벗어나면 사라진는데 포인터가 유니크 포인터다. ㄸ
** threadpool_executor
- 스레드풀에 클로져를 schedule한다. 자세한 부분은 tensorflow/core/lib/core/thread.h 참조
** inline_executor
- 당연한 수순의 함수 실행을 지원한다. 멀티스레드 특성이 필요하지 않을 때 도움된다고 하는데... 잘모르겠음 ㅠㅠ
- ...???
** hash
- hash1, hash2 -> hash 로 해시 컴바인 실행
** status_util
- 프로토 버퍼 형식으로 에러 변환 함. 에러 자체의 상태가 ok가 아니면 다른 메시지로 변환함.
** observer
- 특정 이벤트가 일어날 때 일반 함수 포인터를 호출 해줌.(??)
- Notifier 에 함수객체(람다) 를 넣어놓음. notify를 실행시키면 지정된 함수가 실행됨.
- 유의미한 부분은 블록을 벗어나 함수 오브젝트가 사라지는 걸 체크해서 함수 실행함.
- 내부적으로 함수 객체 리스트를 들고 있고, nullptr 인지 아닌지 체크함.
- IsOrphaned, Orphan, Notify 들고 있는 함수 객체가 nullptr인지 확인, nullptr로 지정, 확인 후 실행
- 각 함수가 mutex로 보호됨.
** file_probinb_env
*** class FileProbingEnv
- FileExists, GetChilderen, IsDirectory, GetFilesize 를 제공하는 인터페이스
*** class TensorflowFileprobingenv : public FileProbingenv
- tensorflow:Env 에서 제공하는 환경에 맞춤
* 'core' folder
** loader
- servable: data, algorithm
- loader : stream of specific versioned servable
*** loader
**** estimate resource
- load : fetches any dat that needs to be loaded before using the servable
**** unload
**** servable
- load ~ unload 사이에만 not null
*** ResourceUnsafeLoader : public Loader
- 불안정한 리소스를 사용할 때 상태 체크를 사용할 필요는 없으니까 Status::OK()를 리턴하는 서브 클래스
** loader_harness.h
- 매니저가 로더를 소유하기 전에 대화하는 것.  (어댑터?)
- 전체적인 servable의 상태를 관리
*** state
knew -> kLoading
-> kReady (load is finished)
-> kQuiescing (is going to unavailable for serving)
-> kunloading
-> kDisabled (unload is finiished)
-> kError
- 각 상태 사이 사이 transition을 할 수 있음
*** Options
- retry 할 수, retry 간격, 에러시 콜백함수 설정 가능
*** load
- 보통은 다 상태를 바꿔주기만 하는 함수.
- 얘는 retry(리트라이 제약 조건 안에서 실행 해줌)함수 부른 다음 상태 변화
*** unload
- 언로드 부르기 전에 kQuiesced -> kUnloading
- 언로드 부르고 kUnloading -> kDisabled
** servable_id
- ServableId sturct 는 이름과 버전을 갖는다
- 해시, operator 정의
** servable_data
- ServableId, Status, T data를 갖고 있음
- status 는 컨스트럭터에서 설정되는데,
데이터 없고 status 에러 거나
status ok와 데이터 두가지 버전으로 컨스터럭터
- T는 move_constructible 해야 하며
- DataOrdie 는 return data_
- ConsumeDatatOrDie 는 return std::move(DataOrdie)
** servable_handle
*** UntypedServableHandle
- manager가 타입 없이 사용하려고?
- servable() 함수의 리턴형이 AnyPtr임 (타입만 떼주는거야)
- 프론트에서 잡고 있으면 리로딩시 딜레이 발생할 수 있으므로 최대한 잡지 말아야.
*** ServableHandle
- manager와 프랜드
- 내부의 servable_을 리턴함.
- 클래스 생성시 untyped_handle_->servable().get<T> 로 servable_ set
*** SharedPtrHandle
- UntypedServableHandle
- servable id와 shared_ptr형태의 로더를 갖는다. (초기화시에는 move으로 로더 가져옴)
** servable_state_monitor
- servable 스테이트를 관리하는 스테이트, 로드 시간에 대한 맵임.
- 모니터는 ServableState 버스를 subscribe
- 특정 state에 도달하면 노티 함수를 실행
-  버스에서 스테이트 변경에 대한 정보가 날아다님..
** log_collector
- 레지스트리 클래스에는 팩토리를 등록하고 찾게 되어있음.
- create 시 config에 표현된 로그 팩토리를 찾아 로그 생성해줌
-   virtual Status CollectMessage(const google::protobuf::Message& message) = 0;
- 얘는 프로토 버퍼에서 정의됨.
** request_logger
- UniformSmapler를 가지고 있음
- 샘플 레이트에 맞으면 protobuf 에 정의 된대로 기록함
** server_request_logger
- 서버에 오는 리퀘스트의 샘플을 로깅
- 모델 버전과 파일 프리픽스 관련 확인 과정이 추가되어 있음.
** manager
- managerwrapper 와 friend임.
- private으로 virtaul GetUntypedServableHandle, GetAvailableUntypedservablehandles 함수를 들고 있음
- 얘네는 상속받는 private안에서 구현해야함.
- mangager.cc 없고 h파일에 다 정의 되어 있음. ServableRequest 구현은 inline 함수임

*** Class ServableRequest
- ServableRequest 를 생성한다. 내부적으로는 name, version을 들고 있다.
*** ListAvailableServableIds
*** GetAvailableservablehandles
- ServableId, SerableHandle 맵을 리턴
*** GetServableHandle
- 주어진 ServableReqeust에 대한 핸들을 리턴한다.
- GetUntypedServablehandle을 통해서, untypedHandle을 얻고, 이걸 다시 servableHandle 을 통해서 handle을 얻는다.
** managerWrapper
- manager를 상속받아서 사용함.
- 프랜드라 private virtual 함수들을 overwrite한다.
- 하지만 구현은 그냥   const UniquePtrWithDeps<Manager> wrapped_; 안에 있는 함수를 대신 불러주는 것 밖에 안함. (얘 왜 필요함???)
** basic_manager
-
** source
- servable 처리를 위한 abstraction
- file-system path, rpc, loader 등을 관리
- 데이터가 작음을 가정한다.
-
